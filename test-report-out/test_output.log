=== STANDARD TESTS ===
Warning: Both /Users/hxrts/.cabal and /Users/hxrts/.config/cabal/config exist
- ignoring the former.
It is advisable to remove one of them. In that case, we will use the remaining
one by default (unless '$CABAL_DIR' is explicitly set).
Configuration is affected by the following files:
- cabal.project
- cabal.project.local
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
Warning: The package list for 'hackage.haskell.org' is 15 days old.
Run 'cabal update' to get the latest list of available packages.
Resolving dependencies...
Build profile: -w ghc-9.6.3 -O1
In order, the following will be built (use -v for more details):
 - time-bandits-0.1.0.0 (lib) (configuration changed)
 - time-bandits-0.1.0.0 (test:time-bandits-test) (configuration changed)
Configuring library for time-bandits-0.1.0.0...
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
Preprocessing library for time-bandits-0.1.0.0...
Building library for time-bandits-0.1.0.0...
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
Configuring test suite 'time-bandits-test' for time-bandits-0.1.0.0...
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
Preprocessing test suite 'time-bandits-test' for time-bandits-0.1.0.0...
Building test suite 'time-bandits-test' for time-bandits-0.1.0.0...
Running 1 test suites...
Test suite time-bandits-test: RUNNING...
Running Hspec tests for Fact Observation components...

Fact Observation Tests
  Rules
    Rule creation and management
      creates valid rules [✔]
      adds rules to a ruleset [✔]
      detects duplicate rule IDs [✔]
      successfully adds rules with unique IDs [✔]
  TOML Parser
    Rule parsing
      should attempt to parse a rule from TOML text [✔]
      should attempt to parse a rule from a file [✔]
      should attempt to parse a rule set [✔]
  Fact Observation Engine
    Engine initialization
2025-03-11 11:21:56 [INFO] Rule engine created
      creates a fact observation engine with default config [✔]
    Rule evaluation
2025-03-11 11:21:56 [INFO] Rule engine created
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule test-rule
2025-03-11 11:21:56 [INFO] Rule test-rule matched, generating fact
2025-03-11 11:21:56 [INFO] Stored fact in facts/PriceObservation-test-rule.json
      evaluates rules against input data [✔]
2025-03-11 11:21:56 [INFO] Rule engine created
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule passing-rule
2025-03-11 11:21:56 [INFO] Rule passing-rule matched, generating fact
2025-03-11 11:21:56 [INFO] Stored fact in facts/PriceObservation-passing-rule.json
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule failing-rule
2025-03-11 11:21:56 [DEBUG] Rule failing-rule did not match
      handles rule conditions correctly [✔]
    Rule loading and validation
2025-03-11 11:21:56 [INFO] Rule engine created
2025-03-11 11:21:56 [INFO] Loading rules from directory /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-59f88cd5bf32bb56
2025-03-11 11:21:56 [INFO] Loading rules from /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-59f88cd5bf32bb56/rule1.toml
2025-03-11 11:21:56 [INFO] Loaded 0 rules
2025-03-11 11:21:56 [INFO] Loading rules from /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-59f88cd5bf32bb56/rule2.toml
2025-03-11 11:21:56 [INFO] Loaded 0 rules
2025-03-11 11:21:56 [INFO] Loading rules from /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-59f88cd5bf32bb56/rule3.toml
2025-03-11 11:21:56 [INFO] Loaded 0 rules
2025-03-11 11:21:56 [INFO] Loaded 0 rules from 3 files
      loads rules from a directory [✔]
2025-03-11 11:21:56 [INFO] Rule engine created
2025-03-11 11:21:56 [INFO] Loading rules from directory /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-validation-24f913d38ef238c4
2025-03-11 11:21:56 [INFO] Loading rules from /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-validation-24f913d38ef238c4/invalid_rule_invalid.toml
2025-03-11 11:21:56 [INFO] Loaded 0 rules
2025-03-11 11:21:56 [INFO] Loading rules from /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/test-rules-validation-24f913d38ef238c4/valid_rule.toml
2025-03-11 11:21:56 [INFO] Loaded 0 rules
2025-03-11 11:21:56 [INFO] Loaded 0 rules from 2 files
      validates rules during loading [✔]
  Fact Observation Integration
    End-to-end rule processing
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule price-alert
      loads rules from TOML files and evaluates them [✔]
2025-03-11 11:21:56 [INFO] Rule engine created
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule multi-condition-rule
2025-03-11 11:21:56 [INFO] Rule multi-condition-rule matched, generating fact
2025-03-11 11:21:56 [INFO] Stored fact in /private/tmp/nix-shell.O3FdZL/nix-shell.TMdg5c/multi-condition-test-3565d8d18320da1f/PriceObservation-multi-condition-rule.json
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule multi-condition-rule
2025-03-11 11:21:56 [DEBUG] Rule multi-condition-rule did not match
      processes rules with multiple conditions [✔]
    Configuration integration
2025-03-11 11:21:56 [DEBUG] Evaluating data against rule proof-test-rule
      correctly applies engine configuration [✔]
  Fact Observation CLI
    CLI commands
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
Warning: supplying the --target argument to a nix-wrapped compiler may not work correctly - cc-wrapper is currently not designed with multi-target compilers in mind. You may want to use an un-wrapped compiler instead.
2025-03-11 11:22:01 [INFO] Rule engine created
      runs with help flag [✔]
2025-03-11 11:22:01 [INFO] Rule engine created
2025-03-11 11:22:01 [INFO] Loading rules from directory rules
2025-03-11 11:22:01 [INFO] Loaded 0 rules from 0 files
      loads rules from a directory [✔]
2025-03-11 11:22:01 [INFO] Rule engine created
File not found: rules
      validates rules through CLI [✔]
2025-03-11 11:22:01 [INFO] Rule engine created
File not found: rules
      reports errors for invalid rules [✔]
  Rules Module
    can create an empty RuleSet [✔]
    can create a rule [✔]
2025-03-11 11:22:01 [INFO] Rule engine created
2025-03-11 11:22:01 [DEBUG] Evaluating data against rule same-rule-id
2025-03-11 11:22:01 [DEBUG] Evaluating data against rule unique-rule-id
2025-03-11 11:22:01 [DEBUG] Evaluating data against rule same-rule-id
2025-03-11 11:22:01 [DEBUG] Evaluating data against rule same-rule-id
2025-03-11 11:22:01 [DEBUG] Evaluating data against rule unique-rule-id
    enforces unique rule IDs within a RuleSet [✔]
Content-Addressable Code Tests
  Content-Addressable Code
    Hash Generation
      produces deterministic hashes for functions [✔]
      produces different hashes for different functions [✔]
      produces different hashes for same function with different body [✔]
    Code Repository
      stores and retrieves code definitions [✔]
    Content-Addressable Executor
      executes a function by hash [✔]
      executes a function by name [✔]
      supports function composition [✔]
    Round-trip functionality
      preserves code when storing and retrieving [✔]
  Content-Addressable Code System (ADR-011)
    Code Immutability
      ensures code definitions remain unchanged after creation [✔]
    Decoupled Naming System
      allows renaming without affecting the underlying code [✔]
    Dependency Conflict Resolution
      handles multiple functions with the same name but different implementations [✔]
      allows different modules to use different versions of the same function [✔]
    Content-Aware Execution
      executes code based on its content hash rather than name [✔]
      executes the version of a function referenced by a specific hash, not just the latest [✔]
    Refactoring Support
      preserves references when renaming [✔]
      allows module restructuring without breaking references [✔]

Finished in 5.0240 seconds
38 examples, 0 failures

Skipping CLI tests in Nix build environment
All Hspec tests passed, exiting with success status
Test suite time-bandits-test: PASS
Test suite logged to:
/Users/hxrts/projects/timewave/time-bandits-container/time-bandits/./dist-newstyle/build/aarch64-osx/ghc-9.6.3/time-bandits-0.1.0.0/t/time-bandits-test/test/time-bandits-0.1.0.0-time-bandits-test.log
1 of 1 test suites (1 of 1 test cases) passed.


=== STANDALONE TESTS ===

======================================================
Running Time Bandits standalone tests
======================================================

------ Running Schema Evolution Tests ------
Executing: ghc -o mini_schema_test test/MiniSchemaTest.hs && ./mini_schema_test
Running simplified Schema evolution tests
Testing adding a nullable field to a schema...
Field count before: 2
Field count after: 3
Test passed!
Testing adding a required field (should fail)...
Correctly rejected required field: must_have
Exit code: 0

------ Running TEL Parser Tests ------
Executing: ghc -o mini_tel_test test/MiniTELTest.hs && ./mini_tel_test
Running simplified TEL tests
Testing TEL parsing...
Parsing succeeded!
Number of statements: 3
Test passed!
Testing TEL type checking...
Type checking succeeded!
Testing TEL type conversion...
Int to string: 42
String to int: 123
Invalid string to int conversion correctly failed
Type conversion tests completed
Exit code: 0


=== UNIT TESTS ===


Spec.hs:8:16: warning: [GHC-28007] [-Wmisplaced-pragmas]
    Misplaced OPTIONS pragma
    Suggested fix:
      Perhaps you meant to place it in the module header?
      The module header is the section at the top of the file, before the ‘module’ keyword
  |
8 | {-# OPTIONS_GHC -F -pgmF hspec-discover #-}
  |                ^^^^^^^^^^^^^^^^^^^^^^^^^

Spec.hs:2:1: error:
    Could not find module ‘SimpleNetworkConfig’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
2 | import qualified SimpleNetworkConfig
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Spec.hs:3:1: error:
    Could not find module ‘TimelineScenarioTest’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
3 | import qualified TimelineScenarioTest
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Spec.hs:4:1: error:
    Could not find module ‘ControllerTest’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
4 | import qualified ControllerTest
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Spec.hs:5:1: error:
    Could not find module ‘TimelineDescriptorTest’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
5 | import qualified TimelineDescriptorTest
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Spec.hs:6:1: error:
    Could not find module ‘DistributedLogTest’
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
6 | import qualified DistributedLogTest
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


=== ADDITIONAL TESTS ===

Found        7 additional Mini test files to run

--- Running MiniTimelineTest ---

=== BEGIN TEST OUTPUT (MiniTimelineTest - PASSED) ===
Running simplified Timeline tests
Testing Timeline creation...
Timeline ID: tl_test-timeline
Timeline name: test-timeline
Timeline branch count: 1
Timeline created with correct branch count!

Testing Timeline branching...
Timeline branch count after branching: 2
Timeline branched successfully!
Branch has correct parent reference!

Testing Timeline events...
Event count in main branch: 2
Events added successfully!
Events are in correct order!
=== END TEST OUTPUT (MiniTimelineTest - PASSED) ===
MiniTimelineTest: ✅ PASSED

--- Running MiniTELTest ---

=== BEGIN TEST OUTPUT (MiniTELTest - PASSED) ===
Running simplified TEL tests
Testing TEL parsing...
Parsing succeeded!
Number of statements: 3
Test passed!
Testing TEL type checking...
Type checking succeeded!
Testing TEL type conversion...
Int to string: 42
String to int: 123
Invalid string to int conversion correctly failed
Type conversion tests completed
=== END TEST OUTPUT (MiniTELTest - PASSED) ===
MiniTELTest: ✅ PASSED

--- Running MiniConsensusTest ---

=== BEGIN TEST OUTPUT (MiniConsensusTest - PASSED) ===
Running simplified Consensus tests
Testing basic consensus functionality...
Initial state: 5 nodes, 0 votes
Vote percentages:
  block1: 60.0%
  block2: 40.0%
Consensus for block1: True
Consensus for block2: False
Consensus reached for: block1

Testing changing votes...
Initial voting state:
  block1: 100.0%
After vote changes:
  block1: 33.33333333333333%
  block2: 66.66666666666666%
No block has reached consensus after vote changes
=== END TEST OUTPUT (MiniConsensusTest - PASSED) ===
MiniConsensusTest: ✅ PASSED

--- Running MiniNetworkTest ---

=== BEGIN TEST OUTPUT (MiniNetworkTest - PASSED) ===
Running simplified Network peer discovery tests
Testing peer selection using rendezvous hashing...
Target peer: PeerId "target123"
Selected 3 peers:
  192.168.1.1:8000
  192.168.1.3:8000
  192.168.1.2:8000
Correct number of peers selected!

Testing peer list updates...
Initial peer count: 2
Updated peer count: 3
Correct number of peers after update!
=== END TEST OUTPUT (MiniNetworkTest - PASSED) ===
MiniNetworkTest: ✅ PASSED

--- Running MiniSchemaTest ---

=== BEGIN TEST OUTPUT (MiniSchemaTest - PASSED) ===
Running simplified Schema evolution tests
Testing adding a nullable field to a schema...
Field count before: 2
Field count after: 3
Test passed!
Testing adding a required field (should fail)...
Correctly rejected required field: must_have
=== END TEST OUTPUT (MiniSchemaTest - PASSED) ===
MiniSchemaTest: ✅ PASSED

--- Running MiniLogTest ---

=== BEGIN TEST OUTPUT (MiniLogTest - PASSED) ===
Running simplified Core Log tests
Testing basic logging functionality...
Initial log count: 0
Log count after first entry: 1
First log ID: LogID "testThis is a test message"
Log count after second entry: 2
First log entry retrieved successfully
Second log entry retrieved successfully
  Level: Warning
  Message: Warning message
  Context: testing
=== END TEST OUTPUT (MiniLogTest - PASSED) ===
MiniLogTest: ✅ PASSED

--- Running MiniFactObservationTest ---

=== BEGIN TEST OUTPUT (MiniFactObservationTest - PASSED) ===
Running simplified FactObservation tests
Testing FactObservation rule validation...
Valid rule validated successfully!
Correctly rejected rule with empty name
=== END TEST OUTPUT (MiniFactObservationTest - PASSED) ===
MiniFactObservationTest: ✅ PASSED
